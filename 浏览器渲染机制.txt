浏览器渲染机制

浏览器是多线程的，js是单线程的，js在浏览器中可以是多线程的。

浏览器 在内核控制下相互配合保持同步，他至少常驻三个线程，1)JavaScript引擎线程，2)GUI渲染线程，3)浏览器事件触发线程。

1) javascript 引擎是基于事件驱动单线程运行。
2) 渲染线程负责html浏览器界面渲染，但是GUI与JS引擎互斥，当JS引擎执行时，GUI线程会被挂起，GUI的更新会被保存在一个队列中，等到js引擎空闲时才有机会被执行。这就是js阻塞页面的加载。
3) 事件触发线程，当一个事件被触发时，该线程会把事件添加到任务队列队尾，等待js引擎处理。(后进后出)

//////

浏览器，是一个应用软件，他的界面有哪些特征？
界面，浏览器引擎，渲染引擎，网络，UI后端的接口，js解释器(解释html，css，dom节点，pdf
插件等)，数据存储(cookie, localStorage)，

		用户界面 -----
			|		|
			|		|
			|		|
		浏览器引擎--	|----> 数据存储
			|		|
			|		|
			|		|
	----渲染引擎----	|
	|		|		|
	|		|		|
 JS解析器	网络		UI后端


· 渲染引擎解析HTML文档，将各标记逐渐转化为“内容树”上的dom节点(简称DOM)，同时解析外部css文件以及样式元素中的样式数据(简称CssOM)。然后内容属上的节点带着样式数据会构成一个新的树：Render Tree。 Layout确定节点在浏览器上的位置，最终通过显卡渲染Layout节点内容到浏览器。

注意：获取源文件时，遇到css和img时会另外发送请求获取，此过程时异步的。css文件获取不会阻塞DOM解析，但是会阻塞DOM渲染。css文件获取也会阻塞js代码的执行。

Reflow --- 页面重画，重新构成 Render Tree和 Layout Tree。
Repaint --- 改变颜色，不改变布局。元素的几何尺寸没有改变。

参考： https://www.jianshu.com/p/05eb1b17b298
